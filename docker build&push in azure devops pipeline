1️⃣ Prerequisites

| Item                                    | Why Needed                                                                         |
| --------------------------------------- | ---------------------------------------------------------------------------------- |
| **Azure Subscription**                  | To create and host Azure Container Registry (ACR).                                 |
| **Azure Container Registry (ACR)**      | The private registry where your Docker image will be pushed.                       |
| **Service Principal (SPN)**             | Required for Azure DevOps to authenticate with ACR.                                |
| **Azure DevOps Organization & Project** | Your CI/CD workspace.                                                              |
| **Agent with Docker installed**         | If using a self-hosted agent, install Docker; or use `ubuntu-latest` hosted agent. |
| **Dockerfile**                          | Located in your repo root (or specified path).                                     |
| **Repo linked to Azure DevOps**         | Source code + Dockerfile stored in Azure Repos or GitHub.                          |


1.vm agent setup 
# Variables
RESOURCE_GROUP="MyResourceGroup"
LOCATION="eastus"
VNET_NAME="MyVNet"
SUBNET_NAME="MySubnet"
PUBLIC_IP_NAME="MyPublicIP"
NIC_NAME="MyNIC"
VM_NAME="MyVM"
USERNAME="azureuser"
PASSWORD="YourStrongP@ssw0rd"
IMAGE="Ubuntu2204" # For Windows use: Win2019Datacenter

# 1. Create Resource Group
az group create --name $RESOURCE_GROUP --location $LOCATION

# 2. Create VNet and Subnet
az network vnet create \
  --resource-group $RESOURCE_GROUP \
  --name $VNET_NAME \
  --subnet-name $SUBNET_NAME \
  --address-prefix 10.0.0.0/16 \
  --subnet-prefix 10.0.1.0/24

# 3. Create Public IP
az network public-ip create \
  --resource-group $RESOURCE_GROUP \
  --name $PUBLIC_IP_NAME \
  --sku Basic \
  --allocation-method Dynamic

# 4. Create NIC
az network nic create \
  --resource-group $RESOURCE_GROUP \
  --name $NIC_NAME \
  --vnet-name $VNET_NAME \
  --subnet $SUBNET_NAME \
  --public-ip-address $PUBLIC_IP_NAME

# 5. Create VM
az vm create \
  --resource-group $RESOURCE_GROUP \
  --name $VM_NAME \
  --nics $NIC_NAME \
  --image $IMAGE \
  --admin-username $USERNAME \
  --admin-password $PASSWORD \
  --size Standard_B1s

# 6. Open Port for SSH (Linux) or RDP (Windows)
az vm open-port --port 22 --resource-group $RESOURCE_GROUP --name $VM_NAME  # SSH
# az vm open-port --port 3389 --resource-group $RESOURCE_GROUP --name $VM_NAME  # RDP (Windows)

# 7. Get Public IP
az vm list-ip-addresses --resource-group $RESOURCE_GROUP --name $VM_NAME --output table
--------------------------------------------------------------------------------
putty login
USERNAME="azureuser"
PASSWORD="YourStrongP@ssw0rd"
azureuser@pubip
after login ui
give pwd YourStrongP@ssw0rd

Self-Hosted Agent Authentication Flow

Create Agent Pool

In Azure DevOps → Project Settings → Agent pools → Add pool.

Name: e.g., MySelfHostedPool.

This pool is like a “group” where your agent will be registered.

Add Agent to Pool

Click your new pool → New agent.

Select OS (Windows / Linux / MacOS).

Download the agent package.

Configure Agent
step1 
~/$ mkdir myagent && cd myagent
step2
wget https://download.agent.dev.azure.com/agent/4.260.0/vsts-agent-linux-x64-4.260.0.tar.gz
step3
~/myagent$ tar zxvf vsts-agent-linux-x64-4.260.0.tar.gz
Extract the downloaded ZIP/TAR.
step4
Run config script:
./config.sh
Provide:

Azure DevOps organization URL https://dev.azure.com/venudevops688/

Authentication method: PAT (Personal Access Token).

Generate PAT in User Settings → Personal access tokens with scope Agent Pools (read, manage).

Agent Pool name: the one you created.

Agent name: any identifier for that machine.

Work folder: default _work.  given work folder name(venu is folder name)
Start the Agent

Run manually:
./run.sh

Verify in Azure DevOps
Go back to Agent pools → open your pool.
You should see the agent online ✅
---------------------------------------------------------------


2.step
Create Service Connection in Azure DevOps
Go to Project Settings → Service connections → New service connection → Docker Registry.
Select Azure Container Registry → Authentication method: Service principal (automatic).
Pick your subscription and ACR.

Name it (example: ACR-ServiceConnection).

3.azure pipeline yaml
trigger:
  branches:
    include:
      - main

variables:
  imageName: 'myapp'

stages:
- stage: BuildAndPush
  jobs:
  - job: DockerBuild
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build and push Docker image
      inputs:
        containerRegistry: 'ACR-ServiceConnection'   # service connection name
        repository: '$(imageName)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest
=================================================================================================service principle==================
1️⃣ What is a Service Principal in Azure?

Think of it as a special “app identity” in Azure AD that can log in and act on Azure resources — but it’s not tied to a human user.

In Azure DevOps pipelines, when you use a Service connection, behind the scenes it’s often an SPN that’s used for authentication.

2️⃣ Why We Need It for Azure DevOps → ACR

Azure DevOps needs secure credentials to:

Log into Azure

Push Docker images to ACR

Using a Service Principal is safer than using your personal credentials.

3️⃣ How to Create an SPN (Manual)

You can create it via Azure CLI:

# Variables
ACR_NAME=myacr12345
RESOURCE_GROUP=my-rg
SP_NAME=sp-acr-access

# Get ACR ID
ACR_ID=$(az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP --query id --output tsv)

# Create SP with ACR push/pull permissions
az ad sp create-for-rbac --name $SP_NAME --scopes $ACR_ID --role AcrPush


This command returns:

{
  "appId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",   # Client ID
  "displayName": "sp-acr-access",
  "password": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", # Client Secret
  "tenant": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"    # Tenant ID
}

4️⃣ Use SPN in Azure DevOps Service Connection

Go to Project Settings → Service connections → New service connection.

Choose Docker Registry → Azure Container Registry.

Select Service principal (manual).

Enter:

Server URL: https://<acr-name>.azurecr.io

Service principal ID: appId

Service principal key: password

Tenant ID: tenant

Verify connection.
=========================================================================================================

step 3. how to select git rep in pipeline
Case 1: Repo in Azure Repos
Go to Pipelines → New Pipeline.
Choose Azure Repos Git.
Select your Azure DevOps project’s repository from the list.
Pick an existing YAML file or let it create a starter YAML.
Commit pipeline file to your repo.

Case 2: Repo in GitHub
Go to Pipelines → New Pipeline.
Choose GitHub.
Authorize Azure DevOps to access your GitHub account (OAuth).
Select the desired repository.
Pick your YAML file or start new.
Commit pipeline file to repo.

step4 :docker install in pool agent
Choose the Agent Type

Microsoft-hosted agent → No setup required, Docker pre-installed (use ubuntu-latest).

Self-hosted agent → Must install Docker manually on the machine.

2️⃣ Steps to Run Build in Agent
Step 1: Ensure Agent Has Docker

If Microsoft-hosted: skip this (Docker is pre-installed).
If Self-hosted:

# Install Docker on Linux
sudo apt-get update
sudo apt-get install -y docker.io
sudo usermod -aG docker $(whoami)
sudo systemctl enable docker
sudo systemctl start docker


Then restart the agent so it has Docker group permissions.

Step 2: Create Pipeline in Azure DevOps

Go to Pipelines → New Pipeline.

Select your Git repo (Azure Repos / GitHub).

Choose YAML pipeline.

Use this YAML to run build:

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'   # Or your self-hosted agent name

steps:
- task: Docker@2
  inputs:
    command: build
    Dockerfile: '**/Dockerfile'
    tags: |
      $(Build.BuildId)
