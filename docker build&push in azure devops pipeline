1️⃣ Prerequisites

| Item                                    | Why Needed                                                                         |
| --------------------------------------- | ---------------------------------------------------------------------------------- |
| **Azure Subscription**                  | To create and host Azure Container Registry (ACR).                                 |
| **Azure Container Registry (ACR)**      | The private registry where your Docker image will be pushed.                       |
| **Service Principal (SPN)**             | Required for Azure DevOps to authenticate with ACR.                                |
| **Azure DevOps Organization & Project** | Your CI/CD workspace.                                                              |
| **Agent with Docker installed**         | If using a self-hosted agent, install Docker; or use `ubuntu-latest` hosted agent. |
| **Dockerfile**                          | Located in your repo root (or specified path).                                     |
| **Repo linked to Azure DevOps**         | Source code + Dockerfile stored in Azure Repos or GitHub.                          |


1.vm agent setup 
# Variables
RESOURCE_GROUP="MyResourceGroup"
LOCATION="eastus"
VNET_NAME="MyVNet"
SUBNET_NAME="MySubnet"
PUBLIC_IP_NAME="MyPublicIP"
NIC_NAME="MyNIC"
VM_NAME="MyVM"
USERNAME="azureuser"
PASSWORD="YourStrongP@ssw0rd"
IMAGE="Ubuntu2204" # For Windows use: Win2019Datacenter

# 1. Create Resource Group
az group create --name $RESOURCE_GROUP --location $LOCATION

# 2. Create VNet and Subnet
az network vnet create \
  --resource-group $RESOURCE_GROUP \
  --name $VNET_NAME \
  --subnet-name $SUBNET_NAME \
  --address-prefix 10.0.0.0/16 \
  --subnet-prefix 10.0.1.0/24

# 3. Create Public IP
az network public-ip create \
  --resource-group $RESOURCE_GROUP \
  --name $PUBLIC_IP_NAME \
  --sku Basic \
  --allocation-method Dynamic

# 4. Create NIC
az network nic create \
  --resource-group $RESOURCE_GROUP \
  --name $NIC_NAME \
  --vnet-name $VNET_NAME \
  --subnet $SUBNET_NAME \
  --public-ip-address $PUBLIC_IP_NAME

# 5. Create VM
az vm create \
  --resource-group $RESOURCE_GROUP \
  --name $VM_NAME \
  --nics $NIC_NAME \
  --image $IMAGE \
  --admin-username $USERNAME \
  --admin-password $PASSWORD \
  --size Standard_B1s

# 6. Open Port for SSH (Linux) or RDP (Windows)
az vm open-port --port 22 --resource-group $RESOURCE_GROUP --name $VM_NAME  # SSH
# az vm open-port --port 3389 --resource-group $RESOURCE_GROUP --name $VM_NAME  # RDP (Windows)

# 7. Get Public IP
az vm list-ip-addresses --resource-group $RESOURCE_GROUP --name $VM_NAME --output table

2.step
Create Service Connection in Azure DevOps
Go to Project Settings → Service connections → New service connection → Docker Registry.
Select Azure Container Registry → Authentication method: Service principal (automatic).
Pick your subscription and ACR.

Name it (example: ACR-ServiceConnection).

3.azure pipeline yaml
trigger:
  branches:
    include:
      - main

variables:
  imageName: 'myapp'

stages:
- stage: BuildAndPush
  jobs:
  - job: DockerBuild
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build and push Docker image
      inputs:
        containerRegistry: 'ACR-ServiceConnection'   # service connection name
        repository: '$(imageName)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest


step 3. how to select git rep in pipeline
Case 1: Repo in Azure Repos
Go to Pipelines → New Pipeline.
Choose Azure Repos Git.
Select your Azure DevOps project’s repository from the list.
Pick an existing YAML file or let it create a starter YAML.
Commit pipeline file to your repo.

Case 2: Repo in GitHub
Go to Pipelines → New Pipeline.
Choose GitHub.
Authorize Azure DevOps to access your GitHub account (OAuth).
Select the desired repository.
Pick your YAML file or start new.
Commit pipeline file to repo.
